package main

import (
	"context"
	"io/fs"
	"net/http"
	"net/url"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"zombiezen.com/go/bass/static"
	"zombiezen.com/go/log"
)

func (app *application) initRouter() {
	app.router = mux.NewRouter().StrictSlash(true)
	app.initClientRoute()

	// Edit here!
	app.router.Handle("/", handlers.MethodHandler{
		http.MethodGet:  app.newHTMLHandler(app.index),
		http.MethodHead: app.newHTMLHandler(app.index),
		http.MethodPost: app.newHTMLHandler(app.submitForm),
	})
}

func (app *application) index(ctx context.Context, req *request) (*response, error) {
	// Edit here!
	var data struct {
		Subject string
	}
	data.Subject = req.form.Get("subject")
	if data.Subject == "" {
		data.Subject = "World"
	}
	return &response{
		templateName: "index.html",
		data:         data,
	}, nil
}

func (app *application) submitForm(ctx context.Context, req *request) (*response, error) {
	// Edit here!
	return &response{
		seeOther: "/?" + url.Values{"subject": {req.form.Get("subject")}}.Encode(),
	}, nil
}

func (app *application) initClientRoute() {
	dist, err := fs.Sub(app.clientFiles, "dist")
	if err != nil {
		log.Errorf(context.Background(), "Could not get /client/dist files: %v", err)
		return
	}
	handler := static.NewHandler(dist)
	handler.SetErrorFunc(func(ctx context.Context, path string, err error) string {
		log.Errorf(ctx, "Client file %s: %v", path, err)
		return "internal server error"
	})
	app.router.PathPrefix("/client/").Handler(http.StripPrefix("/client", handler))
}
