package main

import (
	"bytes"
	"context"
	"embed"
	"encoding/hex"
	"errors"
	"flag"
	"fmt"
	"io/fs"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"time"

	"github.com/gorilla/csrf"
	"github.com/gorilla/mux"
	"github.com/yourbase/commons/ini"
	"zombiezen.com/go/bass/sigterm"
	"zombiezen.com/go/log"
)

//go:embed client/dist
//go:embed client/*.html
var embeddedFiles embed.FS

// application handles HTTP requests.
//
// You can initialize new fields in main() and then use them in your
// page handlers.
type application struct {
	clientFiles fs.FS

	routerOnce sync.Once
	router     *mux.Router
}

func (app *application) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	app.routerOnce.Do(app.initRouter)
	app.router.ServeHTTP(w, r)
}

func main() {
	readEnvFile()

	// Configure the application with command-line flags.
	// Edit here!
	app := &application{
		clientFiles: mustSubFS(embeddedFiles, "client"),
	}
	clientPath := flag.String("client", "", "path to client directory (default is to use embedded data)")
	/*{ with .ProgramName | toEnv | printf "%s_CSRF_KEY" -}*/
	csrfKeyHex := flag.String(
		"csrf-key",
		os.Getenv("/*{ . }*/"),
		"hex-encoded CSRF key. Should be 32 or 64 bytes long. "+
			"Overrides the /*{ . }*/ environment variable.",
	)
	/*{- end }*/
	showDebug := flag.Bool("debug", false, "show debugging output")

	// Parse command-line arguments and set up logging.
	flag.Parse()
	if flag.NArg() != 0 {
		flag.Usage()
		os.Exit(64)
	}
	ctx, cancel := signal.NotifyContext(context.Background(), sigterm.Signals()...)
	initLogging(*showDebug)

	// Set up the application.
	// Edit here!
	if *clientPath != "" {
		app.clientFiles = os.DirFS(*clientPath)
	}
	csrfKey, err := hex.DecodeString(*csrfKeyHex)
	if err != nil {
		log.Errorf(ctx, "Invalid CSRF key: %v", err)
		os.Exit(1)
	}

	// Run the application.
	err = serve(ctx, app, csrfKey)
	cancel()
	if err != nil {
		log.Errorf(context.Background(), "%v", err)
		os.Exit(1)
	}
}

// readEnvFile reads the .env file in the current working directory, if present,
// and copies the values into the current process's environment.
func readEnvFile() {
	data, err := os.ReadFile(".env")
	if err != nil {
		return
	}
	cfg, err := ini.Parse(bytes.NewReader(data), nil)
	if err != nil {
		fmt.Fprintln(os.Stderr, "/*{ .ProgramName }*/: invalid .env file:", err)
		return
	}
	vars := cfg.Section("")
	for k := range vars {
		os.Setenv(k, vars.Get(k))
	}
}

func initLogging(showDebug bool) {
	minLogLevel := log.Info
	if showDebug {
		minLogLevel = log.Debug
	}
	log.SetDefault(&log.LevelFilter{
		Min:    minLogLevel,
		Output: log.New(os.Stderr, "/*{ .ProgramName }*/: ", log.StdFlags, nil),
	})
}

func serve(ctx context.Context, app *application, csrfKey []byte) error {
	portString := os.Getenv("PORT")
	if portString == "" {
		portString = "8080"
	}
	port, err := net.Listen("tcp", ":"+portString)
	if err != nil {
		return err
	}
	log.Infof(ctx, "Listening on http://localhost:%d/", port.Addr().(*net.TCPAddr).Port)

	csrfMiddleware := csrf.Protect(
		csrfKey,
		csrf.Path("/"),
	)
	srv := &http.Server{
		Handler:           csrfMiddleware(app),
		BaseContext:       func(net.Listener) context.Context { return ctx },
		ReadHeaderTimeout: 30 * time.Second,
		WriteTimeout:      30 * time.Second,
	}
	idleConnsClosed := make(chan struct{})
	go func() {
		defer close(idleConnsClosed)
		<-ctx.Done()
		log.Infof(ctx, "Shutting down...")
		if err := srv.Shutdown(context.Background()); err != nil {
			log.Errorf(ctx, "During shutdown: %v", err)
		}
	}()
	if err := srv.Serve(port); !errors.Is(err, http.ErrServerClosed) {
		// TODO(soon): This leaks a goroutine.
		return err
	}
	<-idleConnsClosed
	return nil
}

func mustSubFS(fsys fs.FS, name string) fs.FS {
	sub, err := fs.Sub(fsys, name)
	if err != nil {
		panic(err)
	}
	return sub
}
